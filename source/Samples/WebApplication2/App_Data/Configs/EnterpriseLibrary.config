<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="loggingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, Microsoft.Practices.EnterpriseLibrary.Logging" requirePermission="true" />
    <section name="exceptionHandling" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" requirePermission="true" />
  </configSections>

  <loggingConfiguration name="" tracingEnabled="true" defaultCategory="LoggerService">
    <listeners>
      <add name="LoggerServiceTraceListener"
				   type="DotFramework.Infra.Logging.LoggerServiceTraceListener, DotFramework.Infra.Logging"
				   listenerDataType="DotFramework.Infra.Logging.Configuration.LoggerServiceTraceListenerData, DotFramework.Infra.Logging"
				   writeLogEndpointAddress="http://localhost:8201/WrithLog"
				   formatter="DictionaryFormat" />
    </listeners>

    <formatters>
      <add name="DictionaryFormat"
				   type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging"
				   template="Timestamp: {timestamp}{newline}Title: {title}{newline}{newline}{dictionary({key}: {value}{newline})}" />
    </formatters>

    <categorySources>
      <add switchValue="All" name="LoggerService">
        <listeners>
          <add name="LoggerServiceTraceListener" />
        </listeners>
      </add>
    </categorySources>

    <specialSources>
      <allEvents switchValue="All" name="All Events" />
      <notProcessed switchValue="All" name="Unprocessed Category" />
      <errors switchValue="All" name="Logging Errors &amp; Warnings">
        <listeners>
          <add name="LoggerServiceTraceListener" />
        </listeners>
      </errors>
    </specialSources>
  </loggingConfiguration>

  <exceptionHandling>
    <exceptionPolicies>
      <add name="DataAccessPolicy">
        <exceptionTypes>
          <add name="All Exceptions" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
              postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="DataAccessWrapHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  exceptionMessage="Unable to perform data access action." wrapExceptionType="DotFramework.Infra.DataAccessException, DotFramework.Infra.DataAccessFactory, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
              <add name="DataAccessLoggingExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging"
                  logCategory="LoggerService" eventId="100" severity="Error"
                  title="Data Access Exception Handling" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  priority="0" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <add name="DataAccessCustomPolicy">
        <exceptionTypes>
          <add name="All Exceptions" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
              postHandlingAction="NotifyRethrow">
            <exceptionHandlers>
              <add name="DataAccessCustomReplaceHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  replaceExceptionType="DotFramework.Infra.DataAccessCustomException, DotFramework.Infra.DataAccessFactory, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <add name="DataAccessFactoryPolicy">
        <exceptionTypes>
          <add name="All Exceptions" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
              postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="DataAccessFactoryWrapHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  exceptionMessage="Unable to provide the data access service."
                  wrapExceptionType="DotFramework.Infra.DataAccessFactoryException, DotFramework.Infra.DataAccessFactory, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
              <add name="DataAccessFactoryLoggingExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging"
                  logCategory="LoggerService" eventId="100" severity="Error"
                  title="Data Access Layer Factory Exception Handling" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  priority="0" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <add name="BusinessRulesPolicy">
        <exceptionTypes>
          <add name="All Exceptions" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
              postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="BusinessRulesWrapHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  exceptionMessage="Unable to perform business action." wrapExceptionType="DotFramework.Infra.BusinessRulesException, DotFramework.Infra.BusinessRules, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
              <add name="BusinessRulesLoggingExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging"
                  logCategory="LoggerService" eventId="100" severity="Error"
                  title="Business Rules Exception Handling" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  priority="0" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <add name="BusinessRulesCustomPolicy">
        <exceptionTypes>
          <add name="All Exceptions" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
              postHandlingAction="NotifyRethrow">
            <exceptionHandlers>
              <add name="BusinessRulesCustomReplaceHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  replaceExceptionType="DotFramework.Infra.BusinessRulesCustomException, DotFramework.Infra.BusinessRules, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <add name="BusinessRulesFactoryPolicy">
        <exceptionTypes>
          <add name="All Exceptions" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
              postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="BusinessRulesFactoryWrapHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  exceptionMessage="Unable to provide the business rules."
                  wrapExceptionType="DotFramework.Infra.BusinessRulesFactoryException, DotFramework.Infra.BusinessRules, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
              <add name="BusinessRulesFactoryLoggingExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging"
                  logCategory="LoggerService" eventId="100" severity="Error"
                  title="Business Rules Factory Exception Handling" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  priority="0" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <add name="ServicePolicy">
        <exceptionTypes>
          <add name="All Exceptions" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
              postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="ServiceWrapHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  exceptionMessage="Unable to provide the business service."
                  wrapExceptionType="DotFramework.Infra.ServiceException, DotFramework.Infra.ServiceFactory, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
              <add name="ServiceLoggingExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging"
                  logCategory="LoggerService" eventId="100" severity="Error"
                  title="Service Exception Handling" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  priority="0" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <add name="ServiceCustomPolicy">
        <exceptionTypes>
          <add name="All Exceptions" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
              postHandlingAction="NotifyRethrow">
            <exceptionHandlers>
              <add name="ServiceCustomReplaceHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  replaceExceptionType="DotFramework.Infra.ServiceCustomException, DotFramework.Infra.ServiceFactory, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <add name="ServiceFactoryPolicy">
        <exceptionTypes>
          <add name="All Exceptions" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
              postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="ServiceFactoryWrapHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  exceptionMessage="Unable to provide the business service."
                  wrapExceptionType="DotFramework.Infra.ServiceFactoryException, DotFramework.Infra.ServiceFactory, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
              <add name="ServiceFactoryLoggingExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging"
                  logCategory="LoggerService" eventId="100" severity="Error"
                  title="Service Factory Exception Handling" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  priority="0" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <add name="PassThroughPolicy">
        <exceptionTypes>
          <add name="All Exceptions" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
              postHandlingAction="NotifyRethrow">
            <exceptionHandlers>
              <add name="PassThroughReplaceHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  replaceExceptionType="DotFramework.Infra.PassThroughException, DotFramework.Infra.ExceptionHandling, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <add name="LogOnlyPolicy">
        <exceptionTypes>
          <add name="All Exceptions" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
              postHandlingAction="None">
            <exceptionHandlers>
              <add name="LogOnlyLoggingExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging"
                  logCategory="LoggerService" eventId="100" severity="Error"
                  title="Log Only Exception Handling" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  priority="0" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <add name="CriticalPolicy">
        <exceptionTypes>
          <add name="All Exceptions" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
              postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="CriticalWrapHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  exceptionMessage="Critical Exception occurred." wrapExceptionType="DotFramework.Infra.CriticalException, DotFramework.Infra.ExceptionHandling, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
              <add name="CriticalLoggingExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging"
                  logCategory="LoggerService" eventId="100" severity="Critical"
                  title="Critical Exception Handling" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  priority="0" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <!--Web API Policies-->
      <add name="ApiPolicy">
        <exceptionTypes>
          <add name="All Exceptions" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
            postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="ApiWrapHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                exceptionMessage="Unable to perform api action."
                wrapExceptionType="DotFramework.Infra.ApiException, DotFramework.Infra.Web.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
              <add name="ApiLoggingExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging"
                logCategory="LoggerService" eventId="100" severity="Error"
                title="Web API Exception Handling" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                priority="0" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <add name="ApiCustomPolicy">
        <exceptionTypes>
          <add name="All Exceptions" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
              postHandlingAction="NotifyRethrow">
            <exceptionHandlers>
              <add name="ApiCustomReplaceHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                  replaceExceptionType="DotFramework.Infra.ApiCustomException, DotFramework.Infra.Web.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <!--Web API Policies-->
    </exceptionPolicies>
  </exceptionHandling>
</configuration>